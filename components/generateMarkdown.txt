	async function generateMarkdown(editor : typeof schema.BlockNoteEditor, title : string, imageUrl : string) {
		// it is actually formatted don't indent it
		const metadata = 
		`---
		title: ${title}
		date: "${new Date().toISOString().split('T')[0]}"
		excerpt: ""
		author:
		  name: "Kundan"
		  avatar: "https://github.com/techlism.png"
		coverImage: ${imageUrl}
---\n\n`;
	
		const blocks = editor.document.map((block) => {
			if (block.type === TYPE) {
				const originalCode = block.props.code;
				const language = block.props.language;
				// Remove any leading spaces or tabs from each line of the code
				const trimmedCode = originalCode
					.split("\n")
					.map((line) => line.trimStart())
					.join("\n");
				const code = `\`\`\`${language}\n${trimmedCode}\n\`\`\``;
				return { ...block, props: { ...block.props, code } };
			}
			return block;
		});
	
		const markdown = await editor.blocksToMarkdownLossy(blocks);
		// Remove any additional indentation before code blocks
		const cleanedMarkdown = markdown.replace(/^\s+```/gm, "```");
	
		const fullMarkdown = metadata + cleanedMarkdown;
		const blob = new Blob([fullMarkdown], { type: "text/markdown" });
		const url = URL.createObjectURL(blob);
		return url;
	}